name: Run hb tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - opened

jobs:
  test:
    runs-on: ubuntu-22.04
    name: Install Deps and Run Tests
    strategy:
      matrix:
        otp: ['27.3.3']
        rebar3: ['3.24.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang & rebar3
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: ${{ matrix.rebar3 }}

      - id: run_eunit
        name: Run EUnit
        shell: bash
        run: |
          set +e                      

          failed=()
          passed=0

          for file in $(find src -type f -name '*.erl'); do
            module=$(basename "$file" .erl)
            echo "=== Testing module: $module ==="

            # Capture output & exit code
            output=$(rebar3 eunit --module $module 2>&1)
            ret=$?
            echo "$output"

            # 1) Look for a summary line: “Failed: X.  Skipped: Y.  Passed: Z.”
            pattern='Failed: [0-9]+\.\s*Skipped: [0-9]+\.\s*Passed: [0-9]+\.' 
            if summary=$(
              grep -E "$pattern" <<< "$output"
            ); then
              n=$(echo "$summary" | sed -n 's/.*Passed: \([0-9]\+\)\..*/\1/p')
            # 2) Or if it's all-pass: “All N tests passed.”
            elif echo "$output" | grep -qE 'All [0-9]+ tests passed\.'; then
              n=$(echo "$output" | grep -oE 'All [0-9]+' | head -1 | awk '{print $2}')
            # 3) Fallback: count lines ending in “ok”
            else
              n=$(echo "$output" | grep -cE '\.\.\.(\[[0-9. ]+ s\] )?ok$')
            fi

            passed=$((passed + n))

            if [ $ret -ne 0 ]; then
              failed+=("$module")
            fi
          done

          # Export for downstream steps
          echo "failed=${failed[*]}" >> $GITHUB_OUTPUT
          echo "passed=${passed}"   >> $GITHUB_OUTPUT

          # Print a summary in the log
          echo
          echo "✅ Total passed tests: $passed"
          if [ ${#failed[@]} -gt 0 ]; then
            echo
            echo "❌ Failed modules: ${failed[*]}"
            exit 1
          fi


      - name: Notify Slack on Failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          FAILED_LIST: ${{ steps.run_eunit.outputs.failed }}
          PASSED_COUNT: ${{ steps.run_eunit.outputs.passed }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            TEXT="HyperBEAM tests failed on PR #${PR_NUMBER} ${PR_TITLE}. "
          else
            TEXT="HyperBEAM tests failed on main. "
          fi

          # append without spaces around =
          TEXT="$TEXT❌ Failed modules: ${FAILED_LIST}. ✅ ${PASSED_COUNT} passed."

          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -d "channel=$SLACK_CHANNEL_ID" \
            -d "text=${TEXT} <${RUN_URL}|View test output>"




